import { Component, OnDestroy, OnInit, WritableSignal, effect } from '@angular/core';
import { FormControl, FormGroup } from '@angular/forms';
import { PluginListenerHandle } from '@capacitor/core';
import { ConnectionStatus, Network } from '@capacitor/network';
import { Toast } from '@capacitor/toast';
//import { DatabaseService, User } from 'src/app/services/database.service';

@Component({
  selector: 'app-network',
  templateUrl: './network.page.html',
  styleUrls: ['./network.page.scss'],
})
export class NetworkPage implements OnInit, OnDestroy {

  networkListener: PluginListenerHandle | null = null;
  status: ConnectionStatus | null = null;

  userForm: FormGroup = new FormGroup({
    name: new FormControl(),
    active: new FormControl()
  })

  initForm() {
    this.userForm = new FormGroup({
      name: new FormControl(''),
      active: new FormControl(false)
    });
  }


  users = this.database.getUsers();
  constructor(private database: DatabaseService) { 
    effect(()=> {
      console.log("USERS CHANGE", this.users())
    })

    this.initForm();
  }

  // CRUD OPERATION
  async createUser(name: string, active: string) {
    await this.database.createUser(name, active);
  }

  async updateUser(user: User) {
    await this.database.updateUser(user);
  }

  async deleteUser(user: User) {
    await this.database.deleteUser(user);
  }

  async handleSubmit() {
    const { name, active } = this.userForm.value;
    await this.createUser(name, active);
    this.userForm.reset();
  }
 

  async ngOnInit() {
    this.networkListener = Network.addListener('networkStatusChange', status => {
      console.log('Network status changed', status);
      this.status = status;
      Toast.show({
        text: `Network status changed: ${status.connected ? 'Connected' : 'Disconnected'}`,
      }).then(() => {}).catch((err) => {
        console.log(err)
      })
    });

    this.status = await Network.getStatus();
    console.log('Network status:', this.status);
  }

  

  ngOnDestroy() {
    throw new Error('Method not implemented.');
  }

  

}
